@page "/car"
@using Blazorise
@using Blazorise.DataGrid
@using CarDealerAppClient.Models.Cars;
@using CarDealerAppClient.ViewModels.Cars;
@using System.ComponentModel;
@inject ICarViewModel viewModel


<h1>Car</h1>

<Button Color="Color.Success" Outline Clicked="@(() => ShowModal() )">Dodaj samochód</Button>

<DataGrid TItem="CarModel"
          Data="@viewModel.Cars"
          @bind-SelectedRow="@viewModel.SelectedCar"
          Responsive>
    <DataGridColumn Field="@nameof(CarModel.CarId)" Caption="Car Id" Sortable="false" />
    <DataGridColumn Field="@nameof(CarModel.CarName)" Caption="Car Name" Editable />
    <DataGridColumn Field="@nameof(CarModel.CarDescription)" Caption="Car Description" Editable />
    <DataGridColumn Caption="Car details">
        <DisplayTemplate>
            <Button Color="Color.Primary" Clicked="@(async () => await viewModel.NavigateToCarDetails(context.CarId.ToString()))">
                Details
            </Button>
        </DisplayTemplate>
    </DataGridColumn>
</DataGrid>

 <Modal @ref="modalRef">
     <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Dodaj samochód</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Nazwa samochodu</FieldLabel>
                <TextEdit Placeholder="Wpisz nazwę samochodu..." @bind-Text="viewModel.AddCarCommand.CarName" />
            </Field>
            <Field>
                <FieldLabel>Opis samochodu</FieldLabel>
                <TextEdit Placeholder="Wpisz opis samochodu..." @bind-Text="viewModel.AddCarCommand.CarDescription" />

            </Field>       
            <Field>
                <FieldLabel>Zdjęcie samochodu</FieldLabel>
                <TextEdit Placeholder="Wpisz link zdjęcia samochodu..." @bind-Text="viewModel.AddCarCommand.CarImage" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Light" Clicked="@HideModal">Zamknij</Button>
            <Button Color="Color.Primary" Clicked="@(() => { viewModel.AddCar(); HideModal();})">Dodaj samochód</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

 @code {

    protected override async Task OnInitializedAsync()
    {
        viewModel.PropertyChanged += OnPropertyChangedHandler;

        await viewModel.InitializeAsync();
    }
    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }   
    
    private Task HideModal()
    {
        return modalRef.Hide();
    }
}


